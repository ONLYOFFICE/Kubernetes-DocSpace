{{- if .Values.langflow.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pgvector
  namespace: {{ include "docspace.namespace" . | quote }}
  labels:
    app: pgvector
    {{- if .Values.commonLabels }}
    {{- include "docspace.labels.commonLabels" . | trim | nindent 4 }}
    {{- end }}
  {{- if or .Values.commonAnnotations .Values.pgvector.annotations }}
  {{- $dictValue := default .Values.commonAnnotations .Values.pgvector.annotations }}
  annotations: {{- include "docspace.annotations" ( dict "keyName" $dictValue "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgvector
      {{- if .Values.commonLabels }}
      {{- include "docspace.labels.commonLabels" . | trim | nindent 6 }}
      {{- end }}
  serviceName: pgvector
  {{- if .Values.pgvector.updateStrategy }}
  updateStrategy: {{- include "docspace.update.strategyType" .Values.pgvector.updateStrategy }}
  {{- end }}
  template:
    metadata:
      labels:
        app: pgvector
        {{- if .Values.commonLabels }}
        {{- include "docspace.labels.commonLabels" . | trim | nindent 8 }}
        {{- end }}
      {{- if .Values.pgvector.podAnnotations }}
      annotations: {{- include "docspace.annotations" ( dict "keyName" .Values.pgvector.podAnnotations "context" $ ) | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "docspace.serviceAccountName" . }}
      {{- if .Values.pgvector.podSecurityContext.enabled }}
      securityContext: {{- include "docspace.securityContext" .Values.pgvector.podSecurityContext | nindent 8 }}
      {{- end }}
      {{- if or .Values.pgvector.customPodAntiAffinity .Values.pgvector.podAffinity .Values.pgvector.nodeAffinity }}
      affinity:
        {{- with .Values.pgvector.customPodAntiAffinity }}
        podAntiAffinity:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.pgvector.podAffinity }}
        podAffinity:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.pgvector.nodeAffinity }}
        nodeAffinity:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- end }}
      {{- if or .Values.nodeSelector .Values.pgvector.nodeSelector }}
      nodeSelector: {{ toYaml (default .Values.nodeSelector .Values.pgvector.nodeSelector) | nindent 8 }}
      {{- end }}
      {{- if or .Values.tolerations .Values.pgvector.tolerations }}
      tolerations: {{ toYaml (default .Values.tolerations .Values.pgvector.tolerations) | nindent 8 }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      {{- with .Values.router.initContainers }}
      initContainers:
      {{- toYaml . | nindent 6 }}
      {{- end }}
      containers:
      - name: pgvector
        image: {{ .Values.pgvector.image.repository }}:{{ .Values.pgvector.image.tag }}
        imagePullPolicy: {{ .Values.pgvector.image.pullPolicy }}
        {{- if .Values.pgvector.containerSecurityContext.enabled }}
        securityContext: {{- include "docspace.securityContext" .Values.pgvector.containerSecurityContext | nindent 10 }}
        {{- end }}
        {{- if .Values.pgvector.lifecycleHooks }}
        lifecycle: {{- toYaml .Values.pgvector.lifecycleHooks | nindent 10 }}
        {{- end }}
        ports:
        - containerPort: 5432
          name: pgvector
        {{- if .Values.pgvector.startupProbe.enabled }}
        startupProbe: {{- omit .Values.pgvector.startupProbe "enabled" | toYaml | nindent 10 }}
        {{- end }}
        {{- if .Values.pgvector.readinessProbe.enabled }}
        readinessProbe: {{- omit .Values.pgvector.readinessProbe "enabled" | toYaml | nindent 10 }}
        {{- end }}
        {{- if .Values.pgvector.livenessProbe.enabled }}
        livenessProbe: {{- omit .Values.pgvector.livenessProbe "enabled" | toYaml | nindent 10 }}
        {{- end }}
        resources: {{- toYaml .Values.pgvector.resources | nindent 10 }}
        env:
        - name: POSTGRES_USER
          value: "langflow"
        - name: POSTGRES_DB
          value: "langflow"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        {{- with .Values.pgvector.extraEnvVars }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        envFrom:
        - secretRef:
            name: {{ template "docspace.pgvector.secretName" . }}
        volumeMounts:
          - name: pgdata
            mountPath: /var/lib/postgresql/data
        {{- with .Values.pgvector.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
      {{- with .Values.pgvector.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      - name: pgdata
        persistentVolumeClaim:
          claimName: pgdata
{{- end }}
