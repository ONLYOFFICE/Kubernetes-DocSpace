{{- if .Values.ssoauth.enabled }}
apiVersion: apps/v1
kind: {{ .Values.ssoauth.kind }}
metadata:
  name: ssoauth
  namespace: {{ include "docspace.namespace" . | quote }}
  labels:
    app: ssoauth
    {{- if .Values.commonLabels }}
    {{- include "docspace.labels.commonLabels" . | trim | nindent 4 }}
    {{- end }}
  {{- if or .Values.commonAnnotations .Values.ssoauth.annotations }}
  {{- $dictValue := default .Values.commonAnnotations .Values.ssoauth.annotations }}
  annotations: {{- include "docspace.annotations" ( dict "keyName" $dictValue "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.ssoauth.autoscaling.enabled }}
  replicas: {{ .Values.ssoauth.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app: ssoauth
      {{- if .Values.commonLabels }}
      {{- include "docspace.labels.commonLabels" . | trim | nindent 6 }}
      {{- end }}
  {{- if eq .Values.ssoauth.kind "StatefulSet" }}
  serviceName: ssoauth
  {{- end }}
  {{- if .Values.ssoauth.updateStrategy }}
  {{- if eq .Values.ssoauth.kind "Deployment" }}
  strategy: {{- include "docspace.update.strategyType" .Values.ssoauth.updateStrategy }}
  {{- else }}
  updateStrategy: {{- include "docspace.update.strategyType" .Values.ssoauth.updateStrategy }}
  {{- end }}
  {{- end }}
  {{- if eq .Values.ssoauth.kind "StatefulSet" }}
  podManagementPolicy: {{ .Values.ssoauth.podManagementPolicy }}
  {{- end }}
  template:
    metadata:
      labels:
        app: ssoauth
        {{- if .Values.commonLabels }}
        {{- include "docspace.labels.commonLabels" . | trim | nindent 8 }}
        {{- end }}
      {{- if or .Values.podAnnotations .Values.ssoauth.podAnnotations }}
      {{- $dictValue := default .Values.podAnnotations .Values.ssoauth.podAnnotations }}
      annotations: {{- include "docspace.annotations" ( dict "keyName" $dictValue "context" $ ) | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "docspace.serviceAccountName" . }}
      {{- if or .Values.podSecurityContext.enabled .Values.ssoauth.podSecurityContext.enabled }}
      {{- $psc := dict }}
      {{- if .Values.ssoauth.podSecurityContext.enabled }}
      {{- $psc = .Values.ssoauth.podSecurityContext }}
      {{- else }}
      {{- $psc = .Values.podSecurityContext }}
      {{- end }}
      securityContext: {{- include "docspace.securityContext" $psc | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          {{- if eq .Values.podAntiAffinity.type "preferred" }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ssoauth
              topologyKey: {{ .Values.podAntiAffinity.topologyKey }}
            weight: {{ .Values.podAntiAffinity.weight }}
          {{- else if eq .Values.podAntiAffinity.type "required" }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ssoauth
            topologyKey: {{ .Values.podAntiAffinity.topologyKey }}
          {{- end }}
          {{- with .Values.ssoauth.customPodAntiAffinity }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        {{- with .Values.ssoauth.podAffinity }}
        podAffinity:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.ssoauth.nodeAffinity }}
        nodeAffinity:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- if or .Values.nodeSelector .Values.ssoauth.nodeSelector }}
      nodeSelector: {{ toYaml (default .Values.nodeSelector .Values.ssoauth.nodeSelector) | nindent 8 }}
      {{- end }}
      {{- if or .Values.tolerations .Values.ssoauth.tolerations }}
      tolerations: {{ toYaml (default .Values.tolerations .Values.ssoauth.tolerations) | nindent 8 }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      {{- if .Values.connections.hostAliases }}
      hostAliases: {{- toYaml .Values.connections.hostAliases | nindent 8 }}
      {{- end }}
      initContainers:
      - name: app-wait-storage
        image: {{ include "docspace.imageRepository" (list . .Values.initContainers.waitStorage.image.repository) }}:{{ default .Values.images.tag .Values.initContainers.waitStorage.image.tag }}
        imagePullPolicy: {{ .Values.initContainers.waitStorage.image.pullPolicy }}
        {{- if or .Values.containerSecurityContext.enabled .Values.ssoauth.containerSecurityContext.enabled }}
        {{- $icsc := dict }}
        {{- if .Values.ssoauth.containerSecurityContext.enabled }}
        {{- $icsc = .Values.ssoauth.containerSecurityContext }}
        {{- else }}
        {{- $icsc = .Values.containerSecurityContext }}
        {{- end }}
        securityContext: {{- include "docspace.securityContext" $icsc | nindent 10 }}
        {{- end }}
        resources: {{- toYaml .Values.initContainers.waitStorage.resources | nindent 10 }}
        volumeMounts:
        - name: files-data
          mountPath: /var/www/products/
      {{- with .Values.initContainers.custom }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      containers:
      - name: ssoauth
        image: {{ include "docspace.imageRepository" (list . .Values.ssoauth.image.repository) }}:{{ default .Values.images.tag .Values.ssoauth.image.tag }}
        imagePullPolicy: {{ .Values.ssoauth.image.pullPolicy }}
        {{- if or .Values.containerSecurityContext.enabled .Values.ssoauth.containerSecurityContext.enabled }}
        {{- $csc := dict }}
        {{- if .Values.ssoauth.containerSecurityContext.enabled }}
        {{- $csc = .Values.ssoauth.containerSecurityContext }}
        {{- else }}
        {{- $csc = .Values.containerSecurityContext }}
        {{- end }}
        securityContext: {{- include "docspace.securityContext" $csc | nindent 10 }}
        {{- end }}
        {{- if .Values.ssoauth.lifecycleHooks }}
        lifecycle: {{- toYaml .Values.ssoauth.lifecycleHooks | nindent 10 }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.ssoauth.containerPorts.app }}
          name: app
        - containerPort: {{ .Values.ssoauth.containerPorts.sso }}
          name: sso
        {{- if .Values.ssoauth.startupProbe.enabled }}
        startupProbe: {{- omit .Values.ssoauth.startupProbe "enabled" | toYaml | nindent 10 }}
        {{- end }}
        {{- if .Values.ssoauth.readinessProbe.enabled }}
        readinessProbe: {{- omit .Values.ssoauth.readinessProbe "enabled" | toYaml | nindent 10 }}
        {{- end }}
        {{- if .Values.ssoauth.livenessProbe.enabled }}
        livenessProbe: {{- omit .Values.ssoauth.livenessProbe "enabled" | toYaml | nindent 10 }}
        {{- end }}
        resources: {{- toYaml .Values.ssoauth.resources | nindent 10 }}
        env:
        - name: MYSQL_USER
          value: {{ default .Values.connections.mysqlUser .Values.ssoauth.mysqlUser }}
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "docspace.mysql.secretName" . }}
              key: {{ .Values.connections.mysqlSecretKeyPassword }}
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "docspace.redis.secretName" . }}
              key: {{ .Values.connections.redisSecretKeyName }}
        - name: RABBIT_URI
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-broker-uri
              key: broker_uri
        - name: DOCUMENT_SERVER_JWT_ENABLED
          valueFrom:
            secretKeyRef:
              name: {{ template "docspace.jwt.secretName" . }}
              key: JWT_ENABLED
        - name: DOCUMENT_SERVER_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "docspace.jwt.secretName" . }}
              key: JWT_SECRET
        - name: DOCUMENT_SERVER_JWT_HEADER
          valueFrom:
            secretKeyRef:
              name: {{ template "docspace.jwt.secretName" . }}
              key: JWT_HEADER
        {{- with .Values.ssoauth.extraEnvVars }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: docspace
        - secretRef:
            name: {{ template "docspace.coreMachineKey.secretName" . }}
        - secretRef:
            name: {{ template "docspace.jwt.secretName" . }}
        volumeMounts:
        {{- if .Values.extraConf.secretName }}
        {{- $context := . }}
        {{- range .Values.extraConf.fileName }}
        - name: custom-file
          mountPath: /app/{{ $context.Values.product.name }}/config/{{ . }}
          subPath: {{ . }}
        {{- end }}
        {{- end }}
        {{- with .Values.ssoauth.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        - name: docspace-data
          mountPath: /app/{{ .Values.product.name }}/data
        - name: files-data
          mountPath: /var/www/products/ASC.Files/server/
        - name: people-data
          mountPath: /var/www/products/ASC.People/server/
      volumes:
      {{- if .Values.extraConf.secretName }}
      - name: custom-file
        secret:
          secretName: {{ .Values.extraConf.secretName }}
      {{- end }}
      {{- with .Values.ssoauth.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      - name: docspace-data
        persistentVolumeClaim:
          claimName: {{ template "docspace.pvc.data.name" . }}
      - name: files-data
        persistentVolumeClaim:
          claimName: {{ template "docspace.pvc.files.name" . }}
      - name: people-data
        persistentVolumeClaim:
          claimName: {{ template "docspace.pvc.people.name" . }}
{{- end }}
